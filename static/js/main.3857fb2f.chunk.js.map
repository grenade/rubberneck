{"version":3,"sources":["components/workerTypeCounts.js","App.js","serviceWorker.js","index.js"],"names":["WorkerTypeCounts","_ref","workerTypeCounts","react_default","a","createElement","Object","keys","map","workerType","class","pending","waiting","working","App","_this","this","fetch","then","res","json","data","setState","catch","console","log","components_workerTypeCounts","state","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA2BeA,EAzBU,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,iBAC1B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,+BACPC,OAAOC,KAAKL,GAAkBM,IAAI,SAACC,GAAD,OACjCN,EAAAC,EAAAC,cAAA,OAAKK,MAAM,QACTP,EAAAC,EAAAC,cAAA,OAAKK,MAAM,aACTP,EAAAC,EAAAC,cAAA,MAAIK,MAAM,cAAcD,GACxBN,EAAAC,EAAAC,cAAA,MAAIK,MAAM,iCAAV,cACAP,EAAAC,EAAAC,cAAA,KAAGK,MAAM,aAAT,QACAP,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAiBO,GAAYE,SAClCR,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAiBO,GAAYG,SAClCT,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAiBO,GAAYI,gBCEjCC,8LAfO,IAAAC,EAAAC,KAClBA,KAAKC,MAAM,wFACVC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLN,EAAKO,SAAS,CAAEpB,iBAAkBmB,MAEnCE,MAAMC,QAAQC,sCAGf,OACEtB,EAAAC,EAAAC,cAACqB,EAAD,CAAkBxB,iBAAkBc,KAAKW,MAAMzB,0BAXnC0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.3857fb2f.chunk.js","sourcesContent":["import React from 'react'\n\nconst WorkerTypeCounts = ({ workerTypeCounts }) => {\n  return (\n    <div>\n      <center><h1>Worker Type List</h1></center>\n      {Object.keys(workerTypeCounts).map((workerType) => (\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{workerType}</h5>\n            <h6 class=\"card-subtitle mb-2 text-muted\">blah, blah</h6>\n            <p class=\"card-text\">blah</p>\n            <dl>\n              <dt>pending</dt>\n              <dd>{workerTypeCounts[workerType].pending}</dd>\n              <dt>waiting</dt>\n              <dd>{workerTypeCounts[workerType].waiting}</dd>\n              <dt>working</dt>\n              <dd>{workerTypeCounts[workerType].working}</dd>\n            </dl>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n};\n\nexport default WorkerTypeCounts","import React, { Component } from 'react';\nimport WorkerTypeCounts from './components/workerTypeCounts';\n//import './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.fetch('https://raw.githubusercontent.com/grenade/rubberneck/observe/worker-type-counts.json')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ workerTypeCounts: data })\n    })\n    .catch(console.log)\n  }\n  render () {\n    return (\n      <WorkerTypeCounts workerTypeCounts={this.state.workerTypeCounts} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}