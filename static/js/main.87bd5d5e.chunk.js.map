{"version":3,"sources":["components/workerTypeCounts.js","App.js","serviceWorker.js","index.js"],"names":["WorkerTypeCounts","_ref","workerTypeCounts","react_default","a","createElement","className","type","index_es","icon","map","os","osIndex","kind","kindIndex","key","Object","keys","filter","workerType","includes","workerTypeIndex","pending","waiting","working","ProgressBar_default","striped","variant","now","running","tasks","library","add","faTasks","faServer","faClock","faDesktop","faRecycle","faWrench","faPowerOff","faAndroid","faApple","faLinux","faWindows","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fetch","then","res","json","data","setState","catch","console","log","components_workerTypeCounts","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87bd5d5e.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nconst WorkerTypeCounts = ({ workerTypeCounts }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <button type=\"button\" className=\"btn btn-outline-secondary\">\n          <FontAwesomeIcon icon={['fab', 'apple']} />\n        </button>\n        <button type=\"button\" className=\"btn btn-outline-secondary\">\n          <FontAwesomeIcon icon={['fab', 'android']} />\n        </button>\n        <button type=\"button\" className=\"btn btn-outline-secondary\">\n          <FontAwesomeIcon icon={['fab', 'linux']} />\n        </button>\n        <button type=\"button\" className=\"btn btn-outline-secondary\">\n          <FontAwesomeIcon icon={['fab', 'windows']} />\n        </button>\n      </div>\n        {\n          ['android', 'osx', 'linux', 'win'].map((os, osIndex) => (\n            ['-b-', '-t-'].map((kind, kindIndex) => (\n              <div className=\"row\" key={osIndex + '-' + kindIndex}>\n              {\n                Object.keys(workerTypeCounts).filter(workerType => { return workerType.includes(os) && workerType.includes(kind); }).map((workerType, workerTypeIndex) => (\n                  <div className=\"card\" key={workerTypeIndex}>\n                    <div className=\"card-body\">\n                      <center>\n                        <h3 className=\"card-title\">\n                          {\n                            workerType.includes(\"osx\")\n                              ? (<FontAwesomeIcon icon={['fab', 'apple']} />)\n                              : workerType.includes(\"linux\")\n                                ? (<FontAwesomeIcon icon={['fab', 'linux']} />)\n                                : workerType.includes(\"win\")\n                                  ? (<FontAwesomeIcon icon={['fab', 'windows']} />)\n                                  : workerType.includes(\"android\")\n                                    ? (<FontAwesomeIcon icon={['fab', 'android']} />)\n                                    : (<FontAwesomeIcon icon={['fas', 'desktop']} />)\n                          }\n                        </h3>\n                      </center>\n                      <h5 className=\"card-title\">\n                        {workerType}\n                      </h5>\n                      <hr />\n                      <h6 className=\"card-title\">\n                        <FontAwesomeIcon className=\"text-muted\" icon={['fas', 'server']} />\n                        instances\n                      </h6>\n                      <p className=\"card-text\">\n                        <FontAwesomeIcon className=\"text-muted\" icon={['fas', 'power-off']} />\n                        pending: {workerTypeCounts[workerType].pending}<br />\n\n                        <FontAwesomeIcon className=\"text-muted\" icon={['fas', 'recycle']} />\n                        waiting: {workerTypeCounts[workerType].waiting}<br />\n\n                        <FontAwesomeIcon className=\"text-muted\" icon={['fas', 'wrench']} />\n                        working: {workerTypeCounts[workerType].working}\n                      </p>\n                      <ProgressBar>\n                        <ProgressBar striped variant=\"success\" now={workerTypeCounts[workerType].working / workerTypeCounts[workerType].running * 100} key={1} />\n                        <ProgressBar variant=\"warning\" now={workerTypeCounts[workerType].waiting / workerTypeCounts[workerType].running * 100} key={2} />\n                        <ProgressBar striped variant=\"danger\" now={workerTypeCounts[workerType].pending / workerTypeCounts[workerType].running * 100} key={3} />\n                      </ProgressBar>\n                      <hr />\n                      <h6 className=\"card-title\">\n                        <FontAwesomeIcon className=\"text-muted\" icon={['fas', 'tasks']} />\n                        tasks\n                      </h6>\n                      <p className=\"card-text\">\n                        <FontAwesomeIcon className=\"text-muted\" icon={['fas', 'clock']} />\n                        pending: {workerTypeCounts[workerType].tasks}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              }\n            </div>\n          ))\n        ))\n      }\n    </div>\n  )\n};\n\nexport default WorkerTypeCounts","import React, { Component } from 'react';\nimport WorkerTypeCounts from './components/workerTypeCounts';\n\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faDesktop, faRecycle, faWrench, faPowerOff, faClock, faServer, faTasks } from '@fortawesome/free-solid-svg-icons'\nimport { faAndroid, faApple, faLinux, faWindows } from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nlibrary.add(\n  faTasks,\n  faServer,\n  faClock,\n  faDesktop,\n  faRecycle,\n  faWrench,\n  faPowerOff,\n  faAndroid,\n  faApple,\n  faLinux,\n  faWindows\n)\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      workerTypeCounts: {}\n    };\n    fetch('https://raw.githubusercontent.com/grenade/rubberneck/observe/worker-type-counts.json')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ workerTypeCounts: data })\n    })\n    .catch(console.log);\n  }\n  render () {\n    return (\n      <WorkerTypeCounts workerTypeCounts={this.state.workerTypeCounts} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}